using System;
using System.Collections.Generic;

namespace Colorimetry
{
    public static class Functions
    {
        public static double[] SmoothSpectrum(double[] spectrum, int points, int iterations)
        {
            //returns spectrum array of the same size (unaveraged ends included)
            if (points < 1)
            {
                throw new ArgumentOutOfRangeException("Number of averaging points must be greater than 0");
            }
            if (iterations < 1)
            {
                throw new ArgumentOutOfRangeException("Averaging iterations must be greater than 0");
            }
            if (spectrum.Length < points)
            {
                throw new ArgumentOutOfRangeException("Averaging window exceeds data points in the spectrum");
            }

            int N = 1;

            if (points % 2 == 0)
            {
                N = points + 1; //increase number of points by one if the input value is even
            }
            else
            {
                N = points;
            }

           double[] smoothSpectrum = new double[spectrum.Length];
          
            double pointSum = 0;
            int halfWindow = (int)((N - 1.0) / 2.0);
            int startIndex = halfWindow;
            int endIndex = (int)(spectrum.Length - (N - 1.0) / 2.0 - 1.0);
           for (int i = 0; i < halfWindow; i++)
            {
                smoothSpectrum[i] = spectrum[i];
            }
            for (int i = spectrum.Length - halfWindow ; i < spectrum.Length; i++)
            {
                smoothSpectrum[i] = spectrum[i];
            }
          for (int i = 1; i <= iterations; i++)
            {
                for (int j = startIndex; j <= endIndex; j++)
                {
                    pointSum = 0;
                    for (int k = j - halfWindow; k <= j + halfWindow; k++)
                    {
                        pointSum = pointSum + spectrum[k];
                    }
                    smoothSpectrum[j] = pointSum / N;
                }
            }
            return smoothSpectrum;
        }

        //___________________________________________________________________________________

        public static Tuple<int[], double[]> ResampleSpectrum(double[] spectrum, double[] wavelengths, int minWavelength, int maxWavelength, int nmIncrement)
        {

            int newLength = (int)(1 + (minWavelength - maxWavelength) / nmIncrement);

            int[] newWavelengths = new int[newLength];
            double[] newSpectrum = new double[newLength];

            int index = 0;

            for (int i = 0; i < newWavelengths.Length; i++)
            {
                newWavelengths[i] = minWavelength + i * nmIncrement;
                newSpectrum[i] = 0;
            }

            for (int i = 1; i < wavelengths.Length; i++)
            {
                if (newWavelengths[index] >= wavelengths[i - 1] && newWavelengths[index] <= wavelengths[i])
                {
                    newSpectrum[index] = (spectrum[i] - spectrum[i - 1]) * (newWavelengths[index] - wavelengths[i - 1]) / (wavelengths[i] - wavelengths[i - 1]) + spectrum[i - 1];
                    index = index + 1;
                }
                if (index >= newLength)
                {
                    break;
                }
            }

            return new Tuple<int[], double[]>(newWavelengths, newSpectrum);
        }

        //___________________________________________________________________________________

        public static double[] SpectrumToXYZ(double[] reflectance, int[] wavelengths)
        {
            //This function converts a visible reflectance spectrum (0 to 100% scale) to CIEXYZ colour values.
            //Accepts different wavelength spacing; however, it must be constant within a function call

            if (reflectance.Length != wavelengths.Length)
            {
                throw new ArgumentException("Lengths of reflectance and wavelength arrays are not equal");
            }

            double[] XYZ = new double[] { 0, 0, 0 };

            // 2-deg XYZ CMFs transformed from the CIE (2006) 2-deg LMS cone fundamentals, from cvrl.org Dec. 8, 2021.
            int[] lambda = new int[] { 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830 };
            double[] xbar = new double[] { 0.003769647, 0.004532416, 0.005446553, 0.006538868, 0.007839699, 0.009382967, 0.01120608, 0.01334965, 0.0158569, 0.01877286, 0.02214302, 0.02601285, 0.03043036, 0.03544325, 0.0410964, 0.04742986, 0.05447394, 0.06223612, 0.07070048, 0.07982513, 0.08953803, 0.09974848, 0.1104019, 0.1214566, 0.1328741, 0.1446214, 0.1566468, 0.1687901, 0.1808328, 0.1925216, 0.2035729, 0.2137531, 0.2231348, 0.2319245, 0.2403892, 0.2488523, 0.2575896, 0.2664991, 0.2753532, 0.2838921, 0.2918246, 0.29892, 0.3052993, 0.3112031, 0.3169047, 0.3227087, 0.3288194, 0.3349242, 0.3405452, 0.3451688, 0.3482554, 0.3494153, 0.3489075, 0.3471746, 0.3446705, 0.3418483, 0.339024, 0.3359926, 0.3324276, 0.3280157, 0.3224637, 0.3156225, 0.3078201, 0.2994771, 0.2909776, 0.2826646, 0.2747962, 0.2674312, 0.2605847, 0.2542749, 0.2485254, 0.2433039, 0.2383414, 0.2333253, 0.2279619, 0.2219781, 0.2151735, 0.2075619, 0.1992183, 0.190229, 0.1806905, 0.1707154, 0.1604471, 0.1500244, 0.1395705, 0.129192, 0.1189859, 0.1090615, 0.09951424, 0.0904185, 0.08182895, 0.07376817, 0.06619477, 0.0590638, 0.05234242, 0.04600865, 0.04006154, 0.03454373, 0.02949091, 0.0249214, 0.02083981, 0.01723591, 0.01407924, 0.01134516, 0.009019658, 0.007097731, 0.005571145, 0.004394566, 0.003516303, 0.002887638, 0.002461588, 0.002206348, 0.002149559, 0.002337091, 0.002818931, 0.003649178, 0.004891359, 0.006629364, 0.008942902, 0.01190224, 0.01556989, 0.01997668, 0.02504698, 0.0306753, 0.03674999, 0.04315171, 0.04978584, 0.05668554, 0.06391651, 0.07154352, 0.07962917, 0.08821473, 0.09726978, 0.1067504, 0.1166192, 0.1268468, 0.137406, 0.1482471, 0.1593076, 0.1705181, 0.1818026, 0.193109, 0.2045085, 0.2161166, 0.228065, 0.2405015, 0.2535441, 0.26713, 0.2811351, 0.2954164, 0.3098117, 0.3241678, 0.3384319, 0.3525786, 0.3665839, 0.3804244, 0.3940988, 0.4076972, 0.4213484, 0.4352003, 0.4494206, 0.4641616, 0.4794395, 0.495218, 0.5114395, 0.5280233, 0.5448696, 0.5618898, 0.5790137, 0.5961882, 0.6133784, 0.6305897, 0.6479223, 0.6654866, 0.6833782, 0.7016774, 0.720411, 0.7394495, 0.7586285, 0.7777885, 0.796775, 0.815453, 0.8337389, 0.8515493, 0.8687862, 0.8853376, 0.9011588, 0.9165278, 0.9318245, 0.9474524, 0.9638388, 0.9812596, 0.9992953, 1.017343, 1.03479, 1.051011, 1.065522, 1.078421, 1.089944, 1.10032, 1.109767, 1.118438, 1.126266, 1.133138, 1.138952, 1.14362, 1.147095, 1.149464, 1.150838, 1.151326, 1.151033, 1.150002, 1.148061, 1.144998, 1.140622, 1.134757, 1.127298, 1.118342, 1.108033, 1.096515, 1.083928, 1.070387, 1.055934, 1.040592, 1.024385, 1.007344, 0.9895268, 0.9711213, 0.9523257, 0.9333248, 0.9142877, 0.8952798, 0.8760157, 0.8561607, 0.8354235, 0.8135565, 0.7904565, 0.7664364, 0.7418777, 0.7171219, 0.6924717, 0.66816, 0.6442697, 0.620845, 0.5979243, 0.575541, 0.5537296, 0.5325412, 0.5120218, 0.492207, 0.4731224, 0.4547417, 0.4368719, 0.4193121, 0.401898, 0.3844986, 0.3670592, 0.3497167, 0.3326305, 0.3159341, 0.2997374, 0.2841189, 0.2691053, 0.2547077, 0.2409319, 0.2277792, 0.2152431, 0.203301, 0.1919276, 0.1810987, 0.1707914, 0.1609842, 0.1516577, 0.1427936, 0.1343737, 0.1263808, 0.1187979, 0.1116088, 0.1047975, 0.09834835, 0.09224597, 0.08647506, 0.08101986, 0.07586514, 0.07099633, 0.0663996, 0.06206225, 0.05797409, 0.05412533, 0.050506, 0.04710606, 0.04391411, 0.04091411, 0.03809067, 0.03543034, 0.03292138, 0.03055672, 0.02834146, 0.02628033, 0.02437465, 0.02262306, 0.02101935, 0.01954647, 0.01818727, 0.01692727, 0.01575417, 0.01465854, 0.01363571, 0.01268205, 0.01179394, 0.01096778, 0.01019964, 0.009484317, 0.008816851, 0.008192921, 0.00760875, 0.007061391, 0.006549509, 0.00607197, 0.005627476, 0.005214608, 0.004831848, 0.004477579, 0.004150166, 0.003847988, 0.003569452, 0.003312857, 0.003076022, 0.002856894, 0.002653681, 0.002464821, 0.00228906, 0.002125694, 0.001974121, 0.001833723, 0.001703876, 0.001583904, 0.001472939, 0.001370151, 0.001274803, 0.001186238, 0.001103871, 0.001027194, 0.0009557493, 0.0008891262, 0.0008269535, 0.0007689351, 0.0007149425, 0.000664859, 0.0006185421, 0.0005758303, 0.0005365046, 0.0005001842, 0.0004665005, 0.0004351386, 0.0004058303, 0.0003783733, 0.0003526892, 0.0003287199, 0.0003063998, 0.0002856577, 0.0002664108, 0.0002485462, 0.0002319529, 0.00021653, 0.0002021853, 0.0001888338, 0.0001763935, 0.0001647895, 0.0001539542, 0.000143827, 0.0001343572, 0.0001255141, 0.0001172706, 0.0001095983, 0.0001024685, 0.00009584715, 0.00008968316, 0.00008392734, 0.00007853708, 0.00007347551, 0.00006871576, 0.00006425257, 0.00006008292, 0.00005620098, 0.0000525987, 0.00004926279, 0.00004616623, 0.00004328212, 0.00004058715, 0.00003806114, 0.00003568818, 0.00003346023, 0.0000313709, 0.00002941371, 0.00002758222, 0.00002586951, 0.00002426701, 0.00002276639, 0.00002136009, 0.00002004122, 0.0000188038, 0.00001764358, 0.00001655671, 0.00001553939, 0.00001458792, 0.00001369853, 0.00001286705, 0.00001208947, 0.00001136207, 0.00001068141, 0.00001004411, 0.000009446399, 0.000008884754, 0.00000835605, 0.000007857521, 0.000007386996, 0.000006943576, 0.000006526548, 0.000006135087, 0.000005768284, 0.000005425069, 0.000005103974, 0.000004803525, 0.00000452235, 0.000004259166, 0.000004012715, 0.000003781597, 0.000003564496, 0.000003360236, 0.000003167765, 0.000002986206, 0.000002814999, 0.000002653663, 0.000002501725, 0.000002358723, 0.000002224206, 0.000002097737, 0.000001978894, 0.000001867268, 0.000001762465 };
            double[] ybar = new double[] { 0.0004146161, 0.0005028333, 0.0006084991, 0.0007344436, 0.0008837389, 0.001059646, 0.001265532, 0.001504753, 0.001780493, 0.002095572, 0.002452194, 0.002852216, 0.003299115, 0.003797466, 0.004352768, 0.004971717, 0.005661014, 0.006421615, 0.007250312, 0.008140173, 0.00907986, 0.01005608, 0.01106456, 0.01210522, 0.01318014, 0.01429377, 0.01545004, 0.01664093, 0.01785302, 0.01907018, 0.02027369, 0.02144805, 0.02260041, 0.02374789, 0.02491247, 0.02612106, 0.02739923, 0.02874993, 0.03016909, 0.03165145, 0.03319038, 0.03477912, 0.03641495, 0.03809569, 0.03981843, 0.0415794, 0.04337098, 0.0451718, 0.0469542, 0.04868718, 0.05033657, 0.05187611, 0.05332218, 0.05470603, 0.05606335, 0.05743393, 0.05885107, 0.06030809, 0.06178644, 0.0632657, 0.06472352, 0.06614749, 0.06757256, 0.06904928, 0.0706328, 0.07238339, 0.0743596, 0.07659383, 0.07911436, 0.08195345, 0.08514816, 0.08872657, 0.09266008, 0.09689723, 0.1013746, 0.1060145, 0.1107377, 0.1155111, 0.1203122, 0.1251161, 0.1298957, 0.1346299, 0.1393309, 0.1440235, 0.1487372, 0.1535066, 0.1583644, 0.1633199, 0.1683761, 0.1735365, 0.1788048, 0.1841819, 0.1896559, 0.1952101, 0.2008259, 0.2064828, 0.2121826, 0.2180279, 0.2241586, 0.2307302, 0.237916, 0.2458706, 0.2546023, 0.264076, 0.274249, 0.285068, 0.2964837, 0.308501, 0.3211393, 0.3344175, 0.3483536, 0.3629601, 0.3782275, 0.3941359, 0.4106582, 0.4277595, 0.4453993, 0.4635396, 0.4821376, 0.501143, 0.5204972, 0.5401387, 0.5600208, 0.5800972, 0.6003172, 0.6206256, 0.6409398, 0.6610772, 0.6808134, 0.6999044, 0.718089, 0.7351593, 0.7511821, 0.7663143, 0.7807352, 0.7946448, 0.8082074, 0.8213817, 0.8340701, 0.8461711, 0.8575799, 0.8682408, 0.8783061, 0.8879907, 0.8975211, 0.9071347, 0.9169947, 0.9269295, 0.9366731, 0.9459482, 0.9544675, 0.9619834, 0.968439, 0.9738289, 0.9781519, 0.9814106, 0.9836669, 0.9852081, 0.9863813, 0.9875357, 0.9890228, 0.9910811, 0.9934913, 0.9959172, 0.9980205, 0.9994608, 0.999993, 0.9997557, 0.9989839, 0.9979123, 0.9967737, 0.9957356, 0.9947115, 0.9935534, 0.9921156, 0.9902549, 0.9878596, 0.9849324, 0.9815036, 0.9776035, 0.9732611, 0.9684764, 0.9631369, 0.9571062, 0.950254, 0.9424569, 0.9336897, 0.9242893, 0.9146707, 0.9052333, 0.8963613, 0.8883069, 0.8808462, 0.8736445, 0.8663755, 0.8587203, 0.8504295, 0.8415047, 0.8320109, 0.8220154, 0.8115868, 0.8007874, 0.7896515, 0.7782053, 0.7664733, 0.7544785, 0.7422473, 0.7298229, 0.7172525, 0.7045818, 0.6918553, 0.6791009, 0.6662846, 0.6533595, 0.6402807, 0.6270066, 0.6135148, 0.5998494, 0.5860682, 0.5722261, 0.5583746, 0.5445535, 0.5307673, 0.517013, 0.5032889, 0.489595, 0.4759442, 0.4623958, 0.4490154, 0.4358622, 0.4229897, 0.4104152, 0.3980356, 0.38573, 0.3733907, 0.3609245, 0.348286, 0.3355702, 0.3228963, 0.3103704, 0.2980865, 0.286116, 0.2744822, 0.2631953, 0.2522628, 0.2416902, 0.2314809, 0.2216378, 0.2121622, 0.2030542, 0.1943124, 0.1859227, 0.1778274, 0.1699654, 0.1622841, 0.1547397, 0.1473081, 0.1400169, 0.1329013, 0.1259913, 0.119312, 0.112882, 0.1067113, 0.1008052, 0.09516653, 0.08979594, 0.08469044, 0.07984009, 0.07523372, 0.07086061, 0.06671045, 0.0627736, 0.05904179, 0.05550703, 0.05216139, 0.04899699, 0.04600578, 0.04317885, 0.04050755, 0.03798376, 0.03559982, 0.03334856, 0.03122332, 0.0292178, 0.02732601, 0.02554223, 0.02386121, 0.02227859, 0.0207902, 0.01939185, 0.01807939, 0.01684817, 0.01569188, 0.01460446, 0.01358062, 0.01261573, 0.01170696, 0.01085608, 0.01006476, 0.009333376, 0.008661284, 0.008046048, 0.00748113, 0.006959987, 0.00647707, 0.006027677, 0.005608169, 0.005216691, 0.004851785, 0.004512008, 0.004195941, 0.003902057, 0.003628371, 0.003373005, 0.003134315, 0.002910864, 0.002701528, 0.002505796, 0.002323231, 0.002153333, 0.001995557, 0.001849316, 0.001713976, 0.001588899, 0.001473453, 0.001367022, 0.001268954, 0.001178421, 0.001094644, 0.001016943, 0.0009447269, 0.0008775171, 0.0008150438, 0.0007570755, 0.0007033755, 0.000653705, 0.0006078048, 0.0005653435, 0.0005260046, 0.0004895061, 0.000455597, 0.0004240548, 0.000394686, 0.0003673178, 0.0003417941, 0.0003179738, 0.0002957441, 0.0002750558, 0.000255864, 0.0002381142, 0.0002217445, 0.0002066711, 0.0001927474, 0.0001798315, 0.0001678023, 0.0001565566, 0.0001460168, 0.0001361535, 0.0001269451, 0.0001183671, 0.0001103928, 0.0001029908, 0.00009611836, 0.00008973323, 0.00008379694, 0.00007827442, 0.00007313312, 0.00006834142, 0.00006387035, 0.00005969389, 0.00005578862, 0.00005213509, 0.00004872179, 0.00004553845, 0.00004257443, 0.00003981884, 0.00003725877, 0.00003487467, 0.00003264765, 0.0000305614, 0.00002860175, 0.00002675841, 0.00002502943, 0.00002341373, 0.00002190914, 0.00002051259, 0.00001921902, 0.00001801796, 0.00001689899, 0.00001585309, 0.00001487243, 0.00001395085, 0.00001308528, 0.00001227327, 0.00001151233, 0.00001080001, 0.00001013364, 0.000009509919, 0.00000892563, 0.000008377852, 0.00000786392, 0.000007381539, 0.000006929096, 0.000006505136, 0.000006108221, 0.000005736935, 0.000005389831, 0.000005065269, 0.000004761667, 0.000004477561, 0.000004211597, 0.000003962457, 0.000003728674, 0.000003508881, 0.000003301868, 0.000003106561, 0.000002922119, 0.000002748208, 0.00000258456, 0.000002430867, 0.000002286786, 0.000002151905, 0.000002025656, 0.000001907464, 0.000001796794, 0.000001693147, 0.000001596032, 0.000001504903, 0.000001419245, 0.0000013386, 0.000001262556, 0.000001190771, 0.000001123031, 0.000001059151, 0.0000009989507, 0.0000009422514, 0.0000008888804, 0.000000838669, 0.0000007914539, 0.000000747077, 0.000000705386 };
            double[] zbar = new double[] { 0.0184726, 0.02221101, 0.02669819, 0.03206937, 0.03847832, 0.04609784, 0.05511953, 0.06575257, 0.07822113, 0.09276013, 0.109609, 0.1290077, 0.1512047, 0.1764441, 0.2049517, 0.2369246, 0.2725123, 0.311782, 0.3547064, 0.4011473, 0.4508369, 0.5034164, 0.5586361, 0.6162734, 0.6760982, 0.7378822, 0.8013019, 0.8655573, 0.9295791, 0.9921293, 1.051821, 1.107509, 1.159527, 1.208869, 1.256834, 1.305008, 1.354758, 1.405594, 1.456414, 1.50596, 1.552826, 1.595902, 1.635768, 1.673573, 1.710604, 1.74828, 1.787504, 1.826609, 1.863108, 1.894332, 1.917479, 1.930529, 1.934819, 1.93265, 1.926395, 1.918437, 1.91043, 1.901224, 1.889, 1.871996, 1.848545, 1.817792, 1.781627, 1.742514, 1.702749, 1.664439, 1.629207, 1.59736, 1.568896, 1.543823, 1.522157, 1.503611, 1.486673, 1.469595, 1.450709, 1.42844, 1.401587, 1.370094, 1.33422, 1.294275, 1.25061, 1.203696, 1.154316, 1.103284, 1.051347, 0.9991789, 0.9473958, 0.8966222, 0.8473981, 0.8001576, 0.7552379, 0.7127879, 0.6725198, 0.6340976, 0.5972433, 0.5617313, 0.5274921, 0.4948809, 0.4642586, 0.4358841, 0.4099313, 0.3864261, 0.3650566, 0.3454812, 0.3274095, 0.3105939, 0.2948102, 0.2798194, 0.26541, 0.2514084, 0.2376753, 0.2241211, 0.2107484, 0.1975839, 0.1846574, 0.1720018, 0.1596918, 0.1479415, 0.1369428, 0.1268279, 0.1176796, 0.109497, 0.1020943, 0.09527993, 0.08890075, 0.08283548, 0.07700982, 0.07144001, 0.06615436, 0.06117199, 0.05650407, 0.05215121, 0.04809566, 0.0443172, 0.04079734, 0.03751912, 0.03446846, 0.03163764, 0.02901901, 0.02660364, 0.02438164, 0.02234097, 0.02046415, 0.01873456, 0.01713788, 0.01566174, 0.01429644, 0.01303702, 0.01187897, 0.01081725, 0.00984647, 0.008960687, 0.008152811, 0.007416025, 0.006744115, 0.006131421, 0.005572778, 0.005063463, 0.004599169, 0.004175971, 0.003790291, 0.003438952, 0.003119341, 0.002829038, 0.002565722, 0.002327186, 0.00211128, 0.001915766, 0.001738589, 0.00157792, 0.001432128, 0.001299781, 0.001179667, 0.001070694, 0.0009718623, 0.0008822531, 0.0008010231, 0.0007273884, 0.0006606347, 0.0006001146, 0.0005452416, 0.0004954847, 0.0004503642, 0.0004094455, 0.0003723345, 0.0003386739, 0.0003081396, 0.000280437, 0.0002552996, 0.0002324859, 0.0002117772, 0.0001929758, 0.0001759024, 0.0001603947, 0.0001463059, 0.0001335031, 0.000121866, 0.0001112857, 0.0001016634, 0.00009291003, 0.00008494468, 0.00007769425, 0.00007109247, 0.00006507936, 0.00005960061, 0.00005460706, 0.00005005417, 0.00004590157, 0.00004211268, 0.00003865437, 0.00003549661, 0.0000326122, 0.00002997643, 0.00002756693, 0.00002536339, 0.00002334738, 0.00002150221, 0.00001981268, 0.000018265, 0.00001684667, 0.00001554631, 0.0000143536, 0.00001325915, 0.00001225443, 0.00001133169, 0.00001048387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            double[] D65 = new double[] { 54.6482, 57.4589, 60.2695, 63.0802, 65.8909, 68.7015, 71.5122, 74.3229, 77.1336, 79.9442, 82.7549, 83.628, 84.5011, 85.3742, 86.2473, 87.1204, 87.9936, 88.8667, 89.7398, 90.6129, 91.486, 91.6806, 91.8752, 92.0697, 92.2643, 92.4589, 92.6535, 92.8481, 93.0426, 93.2372, 93.4318, 92.7568, 92.0819, 91.4069, 90.732, 90.057, 89.3821, 88.7071, 88.0322, 87.3572, 86.6823, 88.5006, 90.3188, 92.1371, 93.9554, 95.7736, 97.5919, 99.4102, 101.228, 103.047, 104.865, 106.079, 107.294, 108.508, 109.722, 110.936, 112.151, 113.365, 114.579, 115.794, 117.008, 117.088, 117.169, 117.249, 117.33, 117.41, 117.49, 117.571, 117.651, 117.732, 117.812, 117.517, 117.222, 116.927, 116.632, 116.336, 116.041, 115.746, 115.451, 115.156, 114.861, 114.967, 115.073, 115.18, 115.286, 115.392, 115.498, 115.604, 115.711, 115.817, 115.923, 115.212, 114.501, 113.789, 113.078, 112.367, 111.656, 110.945, 110.233, 109.522, 108.811, 108.865, 108.92, 108.974, 109.028, 109.082, 109.137, 109.191, 109.245, 109.3, 109.354, 109.199, 109.044, 108.888, 108.733, 108.578, 108.423, 108.268, 108.112, 107.957, 107.802, 107.501, 107.2, 106.898, 106.597, 106.296, 105.995, 105.694, 105.392, 105.091, 104.79, 105.08, 105.37, 105.66, 105.95, 106.239, 106.529, 106.819, 107.109, 107.399, 107.689, 107.361, 107.032, 106.704, 106.375, 106.047, 105.719, 105.39, 105.062, 104.733, 104.405, 104.369, 104.333, 104.297, 104.261, 104.225, 104.19, 104.154, 104.118, 104.082, 104.046, 103.641, 103.237, 102.832, 102.428, 102.023, 101.618, 101.214, 100.809, 100.405, 100, 99.6334, 99.2668, 98.9003, 98.5337, 98.1671, 97.8005, 97.4339, 97.0674, 96.7008, 96.3342, 96.2796, 96.225, 96.1703, 96.1157, 96.0611, 96.0065, 95.9519, 95.8972, 95.8426, 95.788, 95.0778, 94.3675, 93.6573, 92.947, 92.2368, 91.5266, 90.8163, 90.1061, 89.3958, 88.6856, 88.8177, 88.9497, 89.0818, 89.2138, 89.3459, 89.478, 89.61, 89.7421, 89.8741, 90.0062, 89.9655, 89.9248, 89.8841, 89.8434, 89.8026, 89.7619, 89.7212, 89.6805, 89.6398, 89.5991, 89.4091, 89.219, 89.029, 88.8389, 88.6489, 88.4589, 88.2688, 88.0788, 87.8887, 87.6987, 87.2577, 86.8167, 86.3757, 85.9347, 85.4936, 85.0526, 84.6116, 84.1706, 83.7296, 83.2886, 83.3297, 83.3707, 83.4118, 83.4528, 83.4939, 83.535, 83.576, 83.6171, 83.6581, 83.6992, 83.332, 82.9647, 82.5975, 82.2302, 81.863, 81.4958, 81.1285, 80.7613, 80.394, 80.0268, 80.0456, 80.0644, 80.0831, 80.1019, 80.1207, 80.1395, 80.1583, 80.177, 80.1958, 80.2146, 80.4209, 80.6272, 80.8336, 81.0399, 81.2462, 81.4525, 81.6588, 81.8652, 82.0715, 82.2778, 81.8784, 81.4791, 81.0797, 80.6804, 80.281, 79.8816, 79.4823, 79.0829, 78.6836, 78.2842, 77.4279, 76.5716, 75.7153, 74.859, 74.0027, 73.1465, 72.2902, 71.4339, 70.5776, 69.7213, 69.9101, 70.0989, 70.2876, 70.4764, 70.6652, 70.854, 71.0428, 71.2315, 71.4203, 71.6091, 71.8831, 72.1571, 72.4311, 72.7051, 72.979, 73.253, 73.527, 73.801, 74.075, 74.349, 73.0745, 71.8, 70.5255, 69.251, 67.9765, 66.702, 65.4275, 64.153, 62.8785, 61.604, 62.4322, 63.2603, 64.0885, 64.9166, 65.7448, 66.573, 67.4011, 68.2293, 69.0574, 69.8856, 70.4057, 70.9259, 71.446, 71.9662, 72.4863, 73.0064, 73.5266, 74.0467, 74.5669, 75.087, 73.9376, 72.7881, 71.6387, 70.4893, 69.3398, 68.1904, 67.041, 65.8916, 64.7421, 63.5927, 61.8752, 60.1578, 58.4403, 56.7229, 55.0054, 53.288, 51.5705, 49.8531, 48.1356, 46.4182, 48.4569, 50.4956, 52.5344, 54.5731, 56.6118, 58.6505, 60.6892, 62.728, 64.7667, 66.8054, 66.4631, 66.1209, 65.7786, 65.4364, 65.0941, 64.7518, 64.4096, 64.0673, 63.7251, 63.3828, 63.4749, 63.567, 63.6592, 63.7513, 63.8434, 63.9355, 64.0276, 64.1198, 64.2119, 64.304, 63.8188, 63.3336, 62.8484, 62.3632, 61.8779, 61.3927, 60.9075, 60.4223, 59.9371, 59.4519, 58.7026, 57.9533, 57.204, 56.4547, 55.7054, 54.9562, 54.2069, 53.4576, 52.7083, 51.959, 52.5072, 53.0553, 53.6035, 54.1516, 54.6998, 55.248, 55.7961, 56.3443, 56.8924, 57.4406, 57.7278, 58.015, 58.3022, 58.5894, 58.8765, 59.1637, 59.4509, 59.7381, 60.0253, 60.3125 };
            double N = 11170.7595; //using D65, 2deg ybar
            int index = 0;
            int nmIncrement = wavelengths[1] - wavelengths[0];
            int newval = 0;
            for (int i = 0; i < lambda.Length; i++ )
            {
               
                index = Array.IndexOf(wavelengths, lambda[i]);
                if (index == -1)
                {
                    continue;
                }
                XYZ[0] = XYZ[0] + xbar[i] * reflectance[index] * D65[i];
                XYZ[1] = XYZ[1] + ybar[i] * reflectance[index] * D65[i];
                XYZ[2] = XYZ[2] + zbar[i] * reflectance[index] * D65[i];
            }

            XYZ[0] = nmIncrement * XYZ[0] / N;
            XYZ[1] = nmIncrement * XYZ[1] / N;
            XYZ[2] = nmIncrement * XYZ[2] / N;
            return XYZ;
        }

        //___________________________________________________________________________________

        public static List<double> XYZtoLAB(double X, double Y, double Z)
        {
            double[] XYZ = new double[] { X, Y, Z };
            return new List<double>(XYZtoLAB(XYZ));
        }
        public static double[] XYZtoLAB(double[] XYZ)
        {
            if (XYZ.Length != 3)
                throw new ArgumentException("XYZ array has a incorrect length. Accepted length is 3.");
           
            double Xr = XYZ[0] / 95.047;
            double Yr = XYZ[1] / 100.0;
            double Zr = XYZ[2] / 108.883;
            double X = 0.0;
            double Y = 0.0;
            double Z = 0.0;
            double[] LAB = new double[3];

            if (Xr > 216.0 / 24389.0)
            {
                X = Math.Pow(Xr, 1.0 / 3.0);
            }
            else
            {
                X = ((24389.0 / 27.0) * Xr + 16.0) / 116.0;
            }

            if (Yr > 216.0 / 24389.0)
            {
                Y = Math.Pow(Yr, 1.0 / 3.0);
            }
            else
            {
                Y = ((24389.0 / 27.0) * Yr + 16.0) / 116.0;
            }

            if (Zr > 216.0 / 24389.0)
            {
                Z = Math.Pow(Zr, 1.0 / 3.0);
            }
            else
            {
                Z = ((24389.0 / 27.0) * Zr + 16.0) / 116.0;
            }

            LAB[0] = (116.0 * Y) - 16.0;
            LAB[1] = 500.0 * (X - Y);
            LAB[2] = 200.0 * (Y - Z);

            return LAB;
        }

        //_______________________________________________________________

        public static List<double> LABtoXYZ(double L, double a, double b)
        {
            double[] Lab = new double[] { L, a, b };
            return new List<double>(LABtoXYZ(Lab));
        }
        public static double[] LABtoXYZ(double[] LAB)
        {
            double Y = (LAB[0] + 16) / 116;
            double X = LAB[1] / 500 + Y;
            double Z = Y - LAB[2] / 200;
            double[] XYZ = new double[3];
            if (Math.Pow(Y, 3) > 0.008856)
            {
                Y = Math.Pow(Y, 3);
            }
            else
            {
                Y = (Y - 16 / 116) / 7.787;
            }

            if (Math.Pow(X, 3) > 0.008856)
            {
                X = Math.Pow(X, 3);
            }
            else
            {
                X = (X - 16 / 116) / 7.787;
            }

            if (Math.Pow(Z, 3) > 0.008856)
            {
                Z = Math.Pow(Z, 3);
            }
            else
            {
                Z = (Z - 16 / 116) / 7.787;
            }

            XYZ[0] = X * 95.047 - X;
            XYZ[1] = Y * 100 - Y;
            XYZ[2] = Z * 108.883 - Z;
            return XYZ;
        }

        //___________________________________________________________________________________
        public static List<int> XYZtoRGB(double X, double Y, double Z)
        {
            double[] XYZ = new double[] { X, Y, Z };
            return new List<int>(XYZtoRGB(XYZ));
        }
        public static int[] XYZtoRGB(double[] XYZ)
        {
            double X = XYZ[0] / 100;
            double Y = XYZ[1] / 100;
            double Z = XYZ[2] / 100;
            int[] sRGB = new int[3];
            double R = X * 3.2406 + Y * -1.5372 + Z * -0.4986;
            double G = X * -0.9689 + Y * 1.8758 + Z * 0.0415;
            double B = X * 0.0557 + Y * -0.2040 + Z * 1.0570;
            if (R > 0.0031308)
            {
                R = 1.055 * Math.Pow(R, (1 / 2.4)) - 0.055;
            }
            else
            {
                R = 12.92 * R;
            }

            if (G > 0.0031308)
            {
                G = 1.055 * Math.Pow(G, (1 / 2.4)) - 0.055;
            }
            else
            {
                G = 12.92 * G;
            }

            if (B > 0.0031308)
            {
                B = 1.055 * Math.Pow(B, (1 / 2.4)) - 0.055;
            }
            else
            {
                B = 12.92 * B;
            }

            R = R * 255;
            G = G * 255;
            B = B * 255;
            sRGB[0] = Convert.ToInt32(R);
            sRGB[1] = Convert.ToInt32(G);
            sRGB[2] = Convert.ToInt32(B);
            for (int i = 0; i <= 2; i++)
            {
                if (sRGB[i] < 0)
                {
                    sRGB[i] = 0;
                }
            }
            for (int i = 0; i <= 2; i++)
            {
                if (sRGB[i] > 255)
                {
                    sRGB[i] = 255;
                }
            }

            return sRGB;
        }

        //_______________________________________________________________
        public static List<double> RGBtoXYZ(int R, int G, int B)
        {
            int[] RGB = new int[] { R, G, B };
            return new List<double>(RGBtoXYZ(RGB));
        }
        public static double[] RGBtoXYZ(int[] RGB)
        {
            double[] XYZ = new double[3];
            double R = (RGB[0] / 255);
            double G = (RGB[1] / 255);
            double B = (RGB[2] / 255);
            if (R > 0.04045)
            {
                R = Math.Pow((R + 0.055) / 1.055, 2.4);
            }
            else
            {
                R = R / 12.92;
            }

            if (G > 0.04045)
            {
                G = Math.Pow((G + 0.055) / 1.055, 2.4);
            }
            else
            {
                G = G / 12.92;
            }

            if (B > 0.04045)
            {
                B = Math.Pow((B + 0.055) / 1.055, 2.4);
            }
            else
            {
                B = B / 12.92;
            }

            R = R * 100;
            G = G * 100;
            B = B * 100;
            XYZ[0] = R * 0.4124 + G * 0.3576 + B * 0.1805;
            XYZ[1] = R * 0.2126 + G * 0.7152 + B * 0.0722;
            XYZ[2] = R * 0.0193 + G * 0.1192 + B * 0.9505;
            return XYZ;
        }

        //_______________________________________________________________

        public enum DeltaEcalcTypes { DE76, DE94_T, DE94_GA, DE00, HyAB }

        public struct LabPoint
        {
            public LabPoint(double _L, double _a, double _b)
            {
                L = _L;
                a = _a;
                b = _b;
            }

            public double L, a, b;

            public double[] ToArray()
            {
                return new double[3] { L, a, b };
            }
        }

        public static double DeltaE(LabPoint reference, LabPoint compare, DeltaEcalcTypes calcMethod = DeltaEcalcTypes.DE00)
        {
            switch (calcMethod)
            {
                case DeltaEcalcTypes.DE76:
                    return DE76(reference.ToArray(), compare.ToArray());
                case DeltaEcalcTypes.DE94_T:
                    return DE94_T(reference.ToArray(), compare.ToArray());
                case DeltaEcalcTypes.DE94_GA:
                    return DE94_GA(reference.ToArray(), compare.ToArray());
                case DeltaEcalcTypes.DE00:
                    return DE00(reference.ToArray(), compare.ToArray());
                case DeltaEcalcTypes.HyAB:
                    //throw new Exception("HyAB not implemented");
                    return HyAB(reference.ToArray(), compare.ToArray());
                default:
                    throw new Exception($"Unknown calcMethod '{calcMethod}'");
            }
        }

        //_______________________________________________________________

        public static double DE76(double[] LAB1, double[] LAB2)
        {
            double DE = Math.Pow(Math.Pow(LAB1[0] - LAB2[0], 2) + Math.Pow(LAB1[1] - LAB2[1], 2) + Math.Pow(LAB1[2] - LAB2[2], 2), (1.0 / 2.0));
            return DE;
        }

        //_______________________________________________________________

        public static double DE94_T(double[] LAB1, double[] LAB2)
        {
            double DL = (LAB1[0] - LAB2[0]);
            double C1 = Math.Sqrt(Math.Pow(LAB1[1], 2.0) + Math.Pow(LAB1[2], 2.0));
            double C2 = Math.Sqrt(Math.Pow(LAB2[1], 2.0) + Math.Pow(LAB2[2], 2.0));
            double DCab = C1 - C2;
            double DHab = Math.Sqrt(Math.Pow(LAB1[1] - LAB2[1], 2.0) + Math.Pow(LAB1[2] - LAB2[2], 2.0) - Math.Pow(C1 - C2, 2.0));
            double SC = 1 + (0.048 * C1);
            double SH = 1 + (0.014 * C1);
            double DE = Math.Sqrt(Math.Pow(DL / 2.0, 2.0) + Math.Pow(DCab / SC, 2.0) + Math.Pow(DHab / SH, 2.0));
            return DE;
        }

        //_______________________________________________________________

        public static double DE94_GA(double[] LAB1, double[] LAB2)
        {
            double DL = (LAB1[0] - LAB2[0]);
            double C1 = Math.Sqrt(Math.Pow(LAB1[1], 2.0) + Math.Pow(LAB1[2], 2.0));
            double C2 = Math.Sqrt(Math.Pow(LAB2[1], 2.0) + Math.Pow(LAB2[2], 2.0));
            double DCab = C1 - C2;
            double DHab = Math.Sqrt(Math.Pow(LAB1[1] - LAB2[1], 2.0) + Math.Pow(LAB1[2] - LAB2[2], 2.0) - Math.Pow(C1 - C2, 2.0));
            double SC = 1 + (0.045 * C1);
            double SH = 1 + (0.015 * C1);
            double DE = Math.Sqrt(Math.Pow(DL, 2.0) + Math.Pow(DCab / SC, 2.0) + Math.Pow(DHab / SH, 2.0));
            return DE;
        }

        //_______________________________________________________________

        public static double DE00(double[] LAB1, double[] LAB2)
        {
            double L1 = LAB1[0];
            double a1 = LAB1[1];
            double b1 = LAB1[2];
            double L2 = LAB2[0];
            double a2 = LAB2[1];
            double b2 = LAB2[2];
            double Lprime = (L1 + L2) / 2.0;
            double C1 = Math.Pow(a1 * a1 + b1 * b1, 0.5);
            double C2 = Math.Pow(a2 * a2 + b2 * b2, 0.5);
            double C = (C1 + C2) / 2.0;
            double G = (1.0 - Math.Pow(Math.Pow(C, 7.0) / (Math.Pow(C, 7.0) + Math.Pow(25.0, 7.0)), 0.5)) / 2.0;
            double a1prime = a1 * (1.0 + G);
            double a2prime = a2 * (1.0 + G);
            double C1prime = Math.Pow(a1prime * a1prime + b1 * b1, 0.5);
            double C2prime = Math.Pow(a2prime * a2prime + b2 * b2, 0.5);
            double Cprime = (C1prime + C2prime) / 2.0;
            double h1prime;
            double h2prime;
            double Hprime;
            double dhprime;
            if ((180.0 / Math.PI) * Math.Atan2(b1, a1prime) >= 0)
            {
                h1prime = (180.0 / Math.PI) * Math.Atan2(b1, a1prime);
            }
            else
            {
                h1prime = (180.0 / Math.PI) * Math.Atan2(b1, a1prime) + 360.0;
            }

            if ((180.0 / Math.PI) * Math.Atan2(b2, a2prime) >= 0)
            {
                h2prime = (180.0 / Math.PI) * Math.Atan2(b2, a2prime);
            }
            else
            {
                h2prime = (180.0 / Math.PI) * Math.Atan2(b2, a2prime) + 360.0;
            }

            if (Math.Abs(h1prime - h2prime) > 180.0)
            {
                Hprime = (h1prime + h2prime + 360.0) / 2.0;
            }
            else
            {
                Hprime = (h1prime + h2prime) / 2.0;
            }

            double T = 1.0 - 0.17 * Math.Cos((Math.PI / 180.0) * (Hprime - 30.0)) + 0.24 * Math.Cos((Math.PI / 180.0) * (2.0 * Hprime)) + 0.32 * Math.Cos((Math.PI / 180.0) * (3.0 * Hprime + 6.0)) - 0.2 * Math.Cos((Math.PI / 180.0) * (4.0 * Hprime - 63.0));
            if (Math.Abs(h2prime - h1prime) <= 180.0)
            {
                dhprime = h2prime - h1prime;
            }
            else if (Math.Abs(h2prime - h1prime) > 180 && (h2prime <= h1prime))
            {
                dhprime = h2prime - h1prime + 360.0;
            }
            else
            {
                dhprime = h2prime - h1prime - 360.0;
            }

            double dLprime = L2 - L1;
            double dCprime = C2prime - C1prime;
            double dHprime = 2.0 * Math.Pow((C1prime * C2prime), 0.5) * Math.Sin((Math.PI / 180.0) * (dhprime / 2.0));
            double SL = 1.0 + 0.015 * Math.Pow((Lprime - 50.0), 2.0) / Math.Pow(20.0 + Math.Pow(Lprime - 50.0, 2.0), 0.5);
            double SC = 1.0 + 0.045 * Cprime;
            double SH = 1.0 + 0.015 * Cprime * T;
            double dTheta = 30.0 * Math.Exp(-Math.Pow((Hprime - 275.0) / 25.0, 2.0));
            double RC = 2.0 * Math.Pow(Math.Pow(C, 7.0) / (Math.Pow(C, 7.0) + Math.Pow(25.0, 7.0)), 0.5);
            double RT = -RC * Math.Sin((Math.PI / 180.0) * (2.0 * dTheta));
            double KL = 1.0;
            double KC = 1.0;
            double KH = 1.0;
            double DE = Math.Pow(Math.Pow(dLprime / (KL * SL), 2.0) + Math.Pow(dCprime / (KC * SC), 2.0) + Math.Pow(dHprime / (KH * SH), 2.0) + RT * (dCprime / (KC * SC)) * (dHprime / (KH * SH)), 0.5);
            return DE;
            // radians = (Math.PI / 180) * degrees;
        }

        //_______________________________________________________________

        public static double HyAB(double[] LAB1, double[] LAB2)
        {
            double DE = Math.Abs(LAB1[0] - LAB2[0]) + Math.Sqrt(Math.Pow(LAB1[1] - LAB2[1], 2) + Math.Pow(LAB1[2] - LAB2[2], 2));
            return DE;
        }

        //__________________________________________________________________


    }
}
