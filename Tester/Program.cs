using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Colorimetry;

namespace Tester
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //Data for testing smoothSpectrum function
            var wavelengthMA = new double[] { 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850 };
            var spectrumMA_1 = new double[] { 0.635, 0.19, 0.036, 0.69, 0.021, 0.878, 0.166, 0.717, 0.754, 0.896, 0.842, 0.499, 0.732, 0.244, 0.476, 0.419, 0.555, 0.464, 0.575, 0.111, 0.144, 0.483, 0.238, 0.527, 0.867, 0.894, 0.863, 0.973, 0.206, 0.607, 0.377, 0.642, 0.741, 0.975, 0.799, 0.251, 0.135, 0.386, 0.301, 0.955, 0.469, 0.605, 0.841, 0.654, 0.39, 0.74, 0.056, 0.955, 0.377, 0.471, 0.926, 0.622, 0.279, 0.495, 0.184, 0.059, 0.906, 0.102, 0.824, 0.121, 0.565, 0.198, 0.65, 0.086, 0.381, 0.686, 0.596, 0.928, 0.698, 0.85, 0.604, 0.952, 0.844, 0.572, 0.551, 0.21, 0.838, 0.129, 0.126, 0.598, 0.501, 0.614, 0.362, 0.851, 0.39, 0.037, 0.03, 0.85, 0.854, 0.568, 0.722, 0.445, 0.52, 0.097, 0.79, 0.372, 0.994, 0.637, 0.152, 0.16, 0.786, 0.749, 0.315, 0.627, 0.982, 0.423, 0.056, 0.319, 0.093, 0.304, 0.196, 0.144, 0.951, 0.656, 0.917, 0.593, 0.689, 0.763, 0.95, 0.814, 0.46, 0.163, 0.298, 0.043, 0.961, 0.721, 0.394, 0.68, 0.162, 0.296, 0.704, 0.299, 0.335, 0.897, 0.759, 0.847, 0.316, 0.138, 0.801, 0.635, 0.672, 0.163, 0.716, 0.119, 0.237, 0.002, 0.659, 0.03, 0.712, 0.546, 0.724, 0.8, 0.87, 0.951, 0.718, 0.872, 0.904, 0.204, 0.789, 0.334, 0.443, 0.659, 0.935, 0.263, 0.873, 0.706, 0.903, 0.174, 0.784, 0.349, 0.193, 0.993, 0.219, 0.88, 0.431, 0.66, 0.063, 0.489, 0.313, 0.625, 0.09, 0.627, 0.637, 0.513, 0.572, 0.616, 0.223, 0.069, 0.511, 0.402, 0.654, 0.245, 0.639, 0.372, 0.208, 0.013, 0.348, 0.659, 0.349, 0.038, 0.764, 0.587, 0.451, 0.782, 0.438, 0.731, 0.919, 0.161, 0.545, 0.377, 0.858, 0.596, 0.008, 0.785, 0.266, 0.299, 0.65, 0.205, 0.368, 0.101, 0.841, 0.693, 0.856, 0.433, 0.098, 0.895, 0.06, 0.644, 0.917, 0.82, 0.063, 0.534, 0.672, 0.359, 0.933, 0.835, 0.771, 0.254, 0.52, 0.044, 0.183, 0.76, 0.296, 0.119, 0.47, 0.12, 0.298, 0.072, 0.938, 0.934, 0.128, 0.573, 0.437, 0.581, 0.066, 0.756, 0.381, 0.467, 0.946, 0.042, 0.959, 0.216, 0.128, 0.986, 0.584, 0.544, 0.012, 0.528, 0.561, 0.759, 0.61, 0.662, 0.967, 0.696, 0.417, 0.34, 0.759, 0.149, 0.319, 0.642, 0.136, 0.479, 0.763, 0.81, 0.577, 0.626, 0.972, 0.902, 0.438, 0.525, 0.941, 0.561, 0.386, 0.808, 0.572, 0.83, 0.064, 0.788, 0.708, 0.211, 0.747, 0.924, 0.628, 0.137, 0.149, 0.658, 0.178, 0.135, 0.726, 0.861, 0.846, 0.753, 0.896, 0.523, 0.146, 0.696, 0.34, 0.355, 0.898, 0.547, 0.417, 0.734, 0.254, 0.98, 0.498, 0.717, 0.221, 0.602, 0.913, 0.331, 0.411, 0.256, 0.613, 0.749, 0.607, 0.87, 0.6, 0.425, 0.901, 0.867, 0.463, 0.926, 0.356, 0.516, 0.081, 0.496, 0.01, 0.99, 0.26, 0.655, 0.296, 0.89, 0.483, 0.467, 0.696, 0.759, 0.801, 0.858, 0.107, 0.799, 0.129, 0.774, 0.244, 0.969, 0.905, 0.144, 0.727, 0.224, 0.017, 0.332, 0.875, 0.182, 0.86, 0.588, 0.525, 0.071, 0.232, 0.002, 0.858, 0.81, 0.78, 0.485, 0.371, 0.545, 0.097, 0.495, 0.226, 0.33, 0.538, 0.252, 0.141, 0.448, 0.531, 0.715, 0.065, 0.051, 0.233, 0.359, 0.752, 0.24, 0.028, 0.11, 0.475, 0.339, 0.698, 0.107, 0.666, 0.797, 0.04, 0.044, 0.611, 0.836, 0.501, 0.795, 0.797, 0.042, 0.112, 0.492, 0.379, 0.549, 0.046, 0.346, 0.442, 0.018, 0.913, 0.295, 0.526, 0.665, 0.212, 0.539, 0.52, 0.846, 0.182, 0.521, 0.631, 0.172, 0.891, 0.799, 0.423, 0.788, 0.48, 0.943, 0.896, 0.419, 0.728, 0.139, 0.403, 0.469, 0.571, 0.726, 0.114, 0.631, 0.225, 0.318, 0.698, 0.148, 0.313, 0.989, 0.772, 0.566, 0.367, 0.769, 0.51, 0.42, 0.901, 0.603, 0.701, 0.263, 0.416, 0.151, 0.45, 0.129, 0.842, 0.984, 0.913, 0.996, 0.671, 0.59, 0.962, 0.83, 0.052, 0.715, 0.402, 0.222, 0.48, 0.797, 0.74, 0.484, 0.699, 0.688, 0.223, 0.907, 0.068, 0.327, 0.486, 0.769, 0.885, 0.44, 0.942, 0.243, 0.722 };
            var spectrumMA_3 = new double[] { 0.635, 0.287, 0.305333333, 0.249, 0.529666667, 0.355, 0.587, 0.545666667, 0.789, 0.830666667, 0.745666667, 0.691, 0.491666667, 0.484, 0.379666667, 0.483333333, 0.479333333, 0.531333333, 0.383333333, 0.276666667, 0.246, 0.288333333, 0.416, 0.544, 0.762666667, 0.874666667, 0.91, 0.680666667, 0.595333333, 0.396666667, 0.542, 0.586666667, 0.786, 0.838333333, 0.675, 0.395, 0.257333333, 0.274, 0.547333333, 0.575, 0.676333333, 0.638333333, 0.7, 0.628333333, 0.594666667, 0.395333333, 0.583666667, 0.462666667, 0.601, 0.591333333, 0.673, 0.609, 0.465333333, 0.319333333, 0.246, 0.383, 0.355666667, 0.610666667, 0.349, 0.503333333, 0.294666667, 0.471, 0.311333333, 0.372333333, 0.384333333, 0.554333333, 0.736666667, 0.740666667, 0.825333333, 0.717333333, 0.802, 0.8, 0.789333333, 0.655666667, 0.444333333, 0.533, 0.392333333, 0.364333333, 0.284333333, 0.408333333, 0.571, 0.492333333, 0.609, 0.534333333, 0.426, 0.152333333, 0.305666667, 0.578, 0.757333333, 0.714666667, 0.578333333, 0.562333333, 0.354, 0.469, 0.419666667, 0.718666667, 0.667666667, 0.594333333, 0.316333333, 0.366, 0.565, 0.616666667, 0.563666667, 0.641333333, 0.677333333, 0.487, 0.266, 0.156, 0.238666667, 0.197666667, 0.214666667, 0.430333333, 0.583666667, 0.841333333, 0.722, 0.733, 0.681666667, 0.800666667, 0.842333333, 0.741333333, 0.479, 0.307, 0.168, 0.434, 0.575, 0.692, 0.598333333, 0.412, 0.379333333, 0.387333333, 0.433, 0.446, 0.510333333, 0.663666667, 0.834333333, 0.640666667, 0.433666667, 0.418333333, 0.524666667, 0.702666667, 0.49, 0.517, 0.332666667, 0.357333333, 0.119333333, 0.299333333, 0.230333333, 0.467, 0.429333333, 0.660666667, 0.69, 0.798, 0.873666667, 0.846333333, 0.847, 0.831333333, 0.66, 0.632333333, 0.442333333, 0.522, 0.478666667, 0.679, 0.619, 0.690333333, 0.614, 0.827333333, 0.594333333, 0.620333333, 0.435666667, 0.442, 0.511666667, 0.468333333, 0.697333333, 0.51, 0.657, 0.384666667, 0.404, 0.288333333, 0.475666667, 0.342666667, 0.447333333, 0.451333333, 0.592333333, 0.574, 0.567, 0.470333333, 0.302666667, 0.267666667, 0.327333333, 0.522333333, 0.433666667, 0.512666667, 0.418666667, 0.406333333, 0.197666667, 0.189666667, 0.34, 0.452, 0.348666667, 0.383666667, 0.463, 0.600666667, 0.606666667, 0.557, 0.650333333, 0.696, 0.603666667, 0.541666667, 0.361, 0.593333333, 0.610333333, 0.487333333, 0.463, 0.353, 0.45, 0.405, 0.384666667, 0.407666667, 0.224666667, 0.436666667, 0.545, 0.796666667, 0.660666667, 0.462333333, 0.475333333, 0.351, 0.533, 0.540333333, 0.793666667, 0.6, 0.472333333, 0.423, 0.521666667, 0.654666667, 0.709, 0.846333333, 0.62, 0.515, 0.272666667, 0.249, 0.329, 0.413, 0.391666667, 0.295, 0.236333333, 0.296, 0.163333333, 0.436, 0.648, 0.666666667, 0.545, 0.379333333, 0.530333333, 0.361333333, 0.467666667, 0.401, 0.534666667, 0.598, 0.485, 0.649, 0.405666667, 0.434333333, 0.443333333, 0.566, 0.704666667, 0.38, 0.361333333, 0.367, 0.616, 0.643333333, 0.677, 0.746333333, 0.775, 0.693333333, 0.484333333, 0.505333333, 0.416, 0.409, 0.37, 0.365666667, 0.419, 0.459333333, 0.684, 0.716666667, 0.671, 0.725, 0.833333333, 0.770666667, 0.621666667, 0.634666667, 0.675666667, 0.629333333, 0.585, 0.588666667, 0.736666667, 0.488666667, 0.560666667, 0.52, 0.569, 0.555333333, 0.627333333, 0.766333333, 0.563, 0.304666667, 0.314666667, 0.328333333, 0.323666667, 0.346333333, 0.574, 0.811, 0.82, 0.831666667, 0.724, 0.521666667, 0.455, 0.394, 0.463666667, 0.531, 0.6, 0.620666667, 0.566, 0.468333333, 0.656, 0.577333333, 0.731666667, 0.478666667, 0.513333333, 0.578666667, 0.615333333, 0.551666667, 0.332666667, 0.426666667, 0.539333333, 0.656333333, 0.742, 0.692333333, 0.631666667, 0.642, 0.731, 0.743666667, 0.752, 0.581666667, 0.599333333, 0.317666667, 0.364333333, 0.195666667, 0.498666667, 0.42, 0.635, 0.403666667, 0.613666667, 0.556333333, 0.613333333, 0.548666667, 0.640666667, 0.752, 0.806, 0.588666667, 0.588, 0.345, 0.567333333, 0.382333333, 0.662333333, 0.706, 0.672666667, 0.592, 0.365, 0.322666667, 0.191, 0.408, 0.463, 0.639, 0.543333333, 0.657666667, 0.394666667, 0.276, 0.101666667, 0.364, 0.556666667, 0.816, 0.691666667, 0.545333333, 0.467, 0.337666667, 0.379, 0.272666667, 0.350333333, 0.364666667, 0.373333333, 0.310333333, 0.280333333, 0.373333333, 0.564666667, 0.437, 0.277, 0.116333333, 0.214333333, 0.448, 0.450333333, 0.34, 0.126, 0.204333333, 0.308, 0.504, 0.381333333, 0.490333333, 0.523333333, 0.501, 0.293666667, 0.231666667, 0.497, 0.649333333, 0.710666667, 0.697666667, 0.544666667, 0.317, 0.215333333, 0.327666667, 0.473333333, 0.324666667, 0.313666667, 0.278, 0.268666667, 0.457666667, 0.408666667, 0.578, 0.495333333, 0.467666667, 0.472, 0.423666667, 0.635, 0.516, 0.516333333, 0.444666667, 0.441333333, 0.564666667, 0.620666667, 0.704333333, 0.67, 0.563666667, 0.737, 0.773, 0.752666667, 0.681, 0.428666667, 0.423333333, 0.337, 0.481, 0.588666667, 0.470333333, 0.490333333, 0.323333333, 0.391333333, 0.413666667, 0.388, 0.386333333, 0.483333333, 0.691333333, 0.775666667, 0.568333333, 0.567333333, 0.548666667, 0.566333333, 0.610333333, 0.641333333, 0.735, 0.522333333, 0.46, 0.276666667, 0.339, 0.243333333, 0.473666667, 0.651666667, 0.913, 0.964333333, 0.86, 0.752333333, 0.741, 0.794, 0.614666667, 0.532333333, 0.389666667, 0.446333333, 0.368, 0.499666667, 0.672333333, 0.673666667, 0.641, 0.623666667, 0.536666667, 0.606, 0.399333333, 0.434, 0.293666667, 0.527333333, 0.713333333, 0.698, 0.755666667, 0.541666667, 0.635666667, 0.722 };
            var spectrumMA_5 = new double[] { 0.635, 0.19, 0.3144, 0.363, 0.3582, 0.4944, 0.5072, 0.6822, 0.675, 0.7416, 0.7446, 0.6426, 0.5586, 0.474, 0.4852, 0.4316, 0.4978, 0.4248, 0.3698, 0.3554, 0.3102, 0.3006, 0.4518, 0.6018, 0.6778, 0.8248, 0.7606, 0.7086, 0.6052, 0.561, 0.5146, 0.6684, 0.7068, 0.6816, 0.5802, 0.5092, 0.3744, 0.4056, 0.4492, 0.5432, 0.6342, 0.7048, 0.5918, 0.646, 0.5362, 0.559, 0.5036, 0.5198, 0.557, 0.6702, 0.535, 0.5586, 0.5012, 0.3278, 0.3846, 0.3492, 0.415, 0.4024, 0.5036, 0.362, 0.4716, 0.324, 0.376, 0.4002, 0.4798, 0.5354, 0.6578, 0.7516, 0.7352, 0.8064, 0.7896, 0.7644, 0.7046, 0.6258, 0.603, 0.46, 0.3708, 0.3802, 0.4384, 0.3936, 0.4402, 0.5852, 0.5436, 0.4508, 0.334, 0.4316, 0.4322, 0.4678, 0.6048, 0.6878, 0.6218, 0.4704, 0.5148, 0.4448, 0.5546, 0.578, 0.589, 0.463, 0.5458, 0.4968, 0.4324, 0.5274, 0.6918, 0.6192, 0.4806, 0.4814, 0.3746, 0.239, 0.1936, 0.2112, 0.3376, 0.4502, 0.5728, 0.6522, 0.7612, 0.7236, 0.7824, 0.7618, 0.7352, 0.63, 0.537, 0.3556, 0.385, 0.4372, 0.4834, 0.5598, 0.5836, 0.4506, 0.4472, 0.4282, 0.3592, 0.5062, 0.5988, 0.6274, 0.6308, 0.5914, 0.5722, 0.5474, 0.5124, 0.4818, 0.5974, 0.461, 0.3814, 0.2474, 0.3466, 0.2094, 0.328, 0.3898, 0.5342, 0.5624, 0.7304, 0.7782, 0.8126, 0.8422, 0.863, 0.7298, 0.6974, 0.6206, 0.5348, 0.4858, 0.632, 0.5268, 0.6346, 0.6872, 0.736, 0.5838, 0.688, 0.5832, 0.4806, 0.4986, 0.5076, 0.5268, 0.5432, 0.6366, 0.4506, 0.5046, 0.3912, 0.43, 0.316, 0.4288, 0.4584, 0.4984, 0.4878, 0.593, 0.5122, 0.3986, 0.3982, 0.3642, 0.3718, 0.3762, 0.4902, 0.4624, 0.4236, 0.2954, 0.316, 0.32, 0.3154, 0.2814, 0.4316, 0.4794, 0.4378, 0.5244, 0.6044, 0.5978, 0.6642, 0.6062, 0.5588, 0.5466, 0.572, 0.5074, 0.4768, 0.5248, 0.5026, 0.3908, 0.4016, 0.441, 0.3576, 0.3246, 0.433, 0.4416, 0.5718, 0.5848, 0.5842, 0.595, 0.4684, 0.426, 0.5228, 0.6672, 0.5008, 0.5956, 0.6012, 0.4896, 0.5122, 0.6666, 0.714, 0.6304, 0.6626, 0.4848, 0.3544, 0.3522, 0.3606, 0.2804, 0.3656, 0.353, 0.2606, 0.2158, 0.3796, 0.4724, 0.474, 0.529, 0.602, 0.5306, 0.357, 0.4826, 0.4442, 0.4502, 0.5232, 0.5184, 0.559, 0.526, 0.4582, 0.4662, 0.5746, 0.4916, 0.4508, 0.5308, 0.4458, 0.4808, 0.494, 0.624, 0.7118, 0.7388, 0.6704, 0.6164, 0.6358, 0.4722, 0.3968, 0.4418, 0.401, 0.345, 0.4678, 0.566, 0.553, 0.651, 0.7496, 0.7774, 0.703, 0.6926, 0.7556, 0.6734, 0.5702, 0.6442, 0.6536, 0.6314, 0.532, 0.6124, 0.5924, 0.5202, 0.5036, 0.6756, 0.6436, 0.5294, 0.517, 0.4992, 0.35, 0.2514, 0.3692, 0.5116, 0.5492, 0.6642, 0.8164, 0.7758, 0.6328, 0.6028, 0.5202, 0.412, 0.487, 0.5672, 0.5114, 0.5902, 0.57, 0.5864, 0.5766, 0.6366, 0.534, 0.6036, 0.5902, 0.5568, 0.4956, 0.5026, 0.5048, 0.472, 0.5272, 0.619, 0.6878, 0.6502, 0.6806, 0.7326, 0.6512, 0.7164, 0.7026, 0.6256, 0.4684, 0.475, 0.2918, 0.4186, 0.3674, 0.4822, 0.4422, 0.6182, 0.5168, 0.5582, 0.5664, 0.659, 0.6412, 0.7162, 0.6442, 0.6648, 0.5388, 0.5334, 0.4106, 0.583, 0.6042, 0.6072, 0.5978, 0.5938, 0.4034, 0.2888, 0.435, 0.326, 0.4532, 0.5674, 0.606, 0.4452, 0.4552, 0.2836, 0.3376, 0.3946, 0.5364, 0.587, 0.6608, 0.5982, 0.4556, 0.3986, 0.3468, 0.3386, 0.3372, 0.3682, 0.2974, 0.3418, 0.382, 0.4174, 0.38, 0.362, 0.319, 0.2846, 0.292, 0.327, 0.3224, 0.2978, 0.321, 0.2384, 0.33, 0.3458, 0.457, 0.5214, 0.4616, 0.3308, 0.4316, 0.4656, 0.4064, 0.5574, 0.708, 0.5942, 0.4494, 0.4476, 0.3644, 0.3148, 0.3156, 0.3624, 0.3524, 0.2802, 0.353, 0.4028, 0.4388, 0.4834, 0.5222, 0.4474, 0.4924, 0.5564, 0.4598, 0.5216, 0.54, 0.4704, 0.4794, 0.6028, 0.5832, 0.6146, 0.6762, 0.6866, 0.706, 0.7052, 0.6932, 0.625, 0.517, 0.4316, 0.462, 0.4616, 0.4566, 0.5022, 0.4534, 0.4028, 0.3972, 0.404, 0.3404, 0.4932, 0.584, 0.5576, 0.6014, 0.6926, 0.5968, 0.5264, 0.5934, 0.6406, 0.627, 0.5776, 0.5768, 0.4268, 0.3962, 0.2818, 0.3976, 0.5112, 0.6636, 0.7728, 0.8812, 0.8308, 0.8264, 0.8098, 0.621, 0.6298, 0.5922, 0.4442, 0.3742, 0.5232, 0.5282, 0.5446, 0.64, 0.6816, 0.5668, 0.6002, 0.517, 0.4426, 0.4022, 0.5114, 0.507, 0.5814, 0.7044, 0.6558, 0.6464, 0.243, 0.722 };
            var spectrumMA_7 = new double[] { 0.635, 0.19, 0.036, 0.373714286, 0.385428571, 0.466, 0.588857143, 0.610571429, 0.678857143, 0.658, 0.669142857, 0.634714286, 0.586857143, 0.538142857, 0.484142857, 0.495, 0.406285714, 0.392, 0.393, 0.367142857, 0.363142857, 0.420714286, 0.466285714, 0.573714286, 0.692142857, 0.652571429, 0.705285714, 0.683857143, 0.651714286, 0.629857143, 0.645857143, 0.621, 0.627428571, 0.56, 0.561285714, 0.512571429, 0.543142857, 0.470857143, 0.443142857, 0.527428571, 0.601571429, 0.602142857, 0.664857143, 0.536428571, 0.605857143, 0.573285714, 0.520428571, 0.559285714, 0.592428571, 0.526571429, 0.589285714, 0.479142857, 0.433714286, 0.495857143, 0.378142857, 0.407, 0.384428571, 0.394428571, 0.396428571, 0.480857143, 0.363714286, 0.403571429, 0.383857143, 0.451714286, 0.503571429, 0.575, 0.603571429, 0.677571429, 0.759142857, 0.781714286, 0.778285714, 0.724428571, 0.654714286, 0.653, 0.585142857, 0.467142857, 0.432, 0.421857143, 0.430857143, 0.452571429, 0.454428571, 0.491714286, 0.479, 0.397857143, 0.447714286, 0.482, 0.511428571, 0.493, 0.500857143, 0.569857143, 0.579428571, 0.570857143, 0.502, 0.562857143, 0.550714286, 0.508857143, 0.457428571, 0.555857143, 0.55, 0.541857143, 0.489428571, 0.538714286, 0.577428571, 0.562571429, 0.495857143, 0.402142857, 0.400571429, 0.339, 0.219285714, 0.294714286, 0.380428571, 0.465857143, 0.537285714, 0.592285714, 0.673285714, 0.788428571, 0.768857143, 0.740857143, 0.633142857, 0.591, 0.498714286, 0.527, 0.494285714, 0.434285714, 0.465714286, 0.465571429, 0.465285714, 0.559714286, 0.465142857, 0.41, 0.481857143, 0.493142857, 0.591, 0.593857143, 0.513, 0.584714286, 0.627571429, 0.595428571, 0.510285714, 0.491571429, 0.463428571, 0.477571429, 0.363428571, 0.366857143, 0.275142857, 0.353571429, 0.329285714, 0.415714286, 0.496142857, 0.620142857, 0.661857143, 0.760142857, 0.783, 0.834142857, 0.759857143, 0.758285714, 0.681714286, 0.609142857, 0.600714286, 0.609714286, 0.518142857, 0.613714286, 0.601857143, 0.683142857, 0.644714286, 0.662571429, 0.578857143, 0.568857143, 0.586, 0.516428571, 0.513142857, 0.549857143, 0.532142857, 0.491285714, 0.533571429, 0.436428571, 0.494428571, 0.381571429, 0.409571429, 0.406285714, 0.470571429, 0.482428571, 0.525714286, 0.468285714, 0.465285714, 0.448714286, 0.415142857, 0.435285714, 0.388571429, 0.391857143, 0.413142857, 0.433, 0.361857143, 0.354142857, 0.354857143, 0.369714286, 0.283857143, 0.339857143, 0.394, 0.456571429, 0.518571429, 0.487, 0.541571429, 0.667428571, 0.581285714, 0.575285714, 0.564714286, 0.575571429, 0.598142857, 0.494857143, 0.475714286, 0.490714286, 0.455571429, 0.494571429, 0.401285714, 0.368714286, 0.382, 0.39, 0.451, 0.530571429, 0.499571429, 0.484285714, 0.559571429, 0.553714286, 0.525571429, 0.557571429, 0.552428571, 0.499571429, 0.561857143, 0.53, 0.572714286, 0.614, 0.602285714, 0.595285714, 0.622571429, 0.620571429, 0.530857143, 0.505714286, 0.481, 0.404, 0.310857143, 0.341714286, 0.284571429, 0.320857143, 0.305, 0.330428571, 0.421571429, 0.422857143, 0.437571429, 0.482857143, 0.523285714, 0.522428571, 0.496428571, 0.417428571, 0.465857143, 0.519142857, 0.462714286, 0.516714286, 0.538142857, 0.448428571, 0.534857143, 0.551571429, 0.494142857, 0.489857143, 0.428285714, 0.477571429, 0.567714286, 0.514, 0.525142857, 0.585571429, 0.683285714, 0.667428571, 0.635857143, 0.635857143, 0.57, 0.521, 0.474571429, 0.394571429, 0.403428571, 0.463857143, 0.471142857, 0.532285714, 0.576142857, 0.623285714, 0.732714286, 0.726857143, 0.692857143, 0.711571429, 0.709285714, 0.675, 0.651571429, 0.604428571, 0.660428571, 0.594571429, 0.572714286, 0.593714286, 0.568714286, 0.56, 0.610285714, 0.581428571, 0.591857143, 0.500571429, 0.493428571, 0.488714286, 0.401285714, 0.373, 0.406285714, 0.507571429, 0.593857143, 0.627857143, 0.677142857, 0.678714286, 0.674428571, 0.6, 0.529857143, 0.550571429, 0.500714286, 0.485571429, 0.569571429, 0.506428571, 0.597857143, 0.618285714, 0.592428571, 0.545857143, 0.572285714, 0.597857143, 0.608857143, 0.527571429, 0.493, 0.478142857, 0.553571429, 0.554285714, 0.548142857, 0.586571429, 0.588571429, 0.680714286, 0.717, 0.676142857, 0.721714286, 0.648285714, 0.636285714, 0.587142857, 0.529285714, 0.406857143, 0.482142857, 0.387, 0.429714286, 0.398285714, 0.513857143, 0.512, 0.577285714, 0.535285714, 0.606571429, 0.627428571, 0.707714286, 0.595857143, 0.641, 0.592714286, 0.603857143, 0.530285714, 0.554285714, 0.561, 0.566285714, 0.556, 0.569571429, 0.461428571, 0.474, 0.460571429, 0.357285714, 0.459571429, 0.439714286, 0.482714286, 0.490428571, 0.476142857, 0.351428571, 0.448, 0.440857143, 0.468285714, 0.462571429, 0.505428571, 0.550142857, 0.563714286, 0.511857143, 0.428428571, 0.364142857, 0.371714286, 0.354714286, 0.297, 0.347142857, 0.352285714, 0.422142857, 0.384285714, 0.314714286, 0.312, 0.343142857, 0.386571429, 0.345, 0.246857143, 0.253285714, 0.313857143, 0.329, 0.377428571, 0.285285714, 0.346142857, 0.456, 0.446, 0.384428571, 0.423285714, 0.443, 0.499285714, 0.517714286, 0.517714286, 0.518, 0.527714286, 0.510714286, 0.445428571, 0.452285714, 0.345285714, 0.280857143, 0.338, 0.324571429, 0.384714286, 0.372714286, 0.369428571, 0.457857143, 0.438714286, 0.452571429, 0.524285714, 0.514714286, 0.498571429, 0.497857143, 0.493, 0.487285714, 0.537571429, 0.577428571, 0.517, 0.603571429, 0.597714286, 0.642285714, 0.745714286, 0.678285714, 0.668142857, 0.627571429, 0.572571429, 0.571, 0.517857143, 0.493571429, 0.45, 0.436142857, 0.448428571, 0.436285714, 0.469, 0.408571429, 0.349571429, 0.474571429, 0.494714286, 0.543428571, 0.550428571, 0.560571429, 0.612285714, 0.627571429, 0.615, 0.590857143, 0.610142857, 0.595285714, 0.544857143, 0.493571429, 0.497857143, 0.387571429, 0.421714286, 0.462142857, 0.555, 0.637857143, 0.712142857, 0.732142857, 0.851142857, 0.849428571, 0.716285714, 0.688, 0.603142857, 0.539, 0.523285714, 0.499714286, 0.486857143, 0.548571429, 0.546285714, 0.587142857, 0.587285714, 0.648285714, 0.544142857, 0.485142857, 0.485428571, 0.495428571, 0.523571429, 0.554571429, 0.559571429, 0.584571429, 0.641, 0.942, 0.243, 0.722 };
            var spectrumMA_9 = new double[] { 0.635, 0.19, 0.036, 0.69, 0.454111111, 0.483111111, 0.555555556, 0.607, 0.611666667, 0.636444444, 0.591777778, 0.619888889, 0.601888889, 0.569666667, 0.534, 0.452777778, 0.413333333, 0.385666667, 0.385, 0.390666667, 0.440444444, 0.478111111, 0.522444444, 0.566666667, 0.577222222, 0.628666667, 0.616888889, 0.661777778, 0.685555556, 0.697555556, 0.687, 0.619, 0.525888889, 0.545888889, 0.511888889, 0.576111111, 0.556888889, 0.541777778, 0.526888889, 0.510777778, 0.526222222, 0.593444444, 0.556777778, 0.629444444, 0.565222222, 0.565444444, 0.601111111, 0.576777778, 0.535111111, 0.546777778, 0.485, 0.485333333, 0.479888889, 0.449333333, 0.488555556, 0.399111111, 0.392777778, 0.383777778, 0.401, 0.390111111, 0.425888889, 0.401444444, 0.456333333, 0.467888889, 0.532, 0.563666667, 0.608777778, 0.642333333, 0.726555556, 0.747777778, 0.732777778, 0.689888889, 0.679888889, 0.616666667, 0.536222222, 0.535555556, 0.485444444, 0.459888889, 0.436555556, 0.469888889, 0.489888889, 0.400888889, 0.389888889, 0.470333333, 0.498777778, 0.506222222, 0.518222222, 0.527444444, 0.490666667, 0.458111111, 0.541777778, 0.579777778, 0.595777778, 0.571666667, 0.525444444, 0.463, 0.500888889, 0.526333333, 0.550555556, 0.532444444, 0.600222222, 0.536777778, 0.472222222, 0.490777778, 0.483333333, 0.429777778, 0.368333333, 0.349333333, 0.385333333, 0.349111111, 0.404, 0.463666667, 0.504777778, 0.579222222, 0.651, 0.719666667, 0.754777778, 0.667222222, 0.627444444, 0.530333333, 0.571222222, 0.574777778, 0.533777778, 0.503777778, 0.431333333, 0.413111111, 0.473222222, 0.473333333, 0.505777778, 0.498666667, 0.502888889, 0.553222222, 0.512777778, 0.510111111, 0.566222222, 0.558555556, 0.6, 0.580888889, 0.560777778, 0.489666667, 0.421888889, 0.387, 0.444888889, 0.359222222, 0.367777778, 0.353777778, 0.416111111, 0.425444444, 0.508888889, 0.588222222, 0.667777778, 0.691444444, 0.788555556, 0.732111111, 0.759111111, 0.715777778, 0.676111111, 0.652666667, 0.650888889, 0.600333333, 0.600444444, 0.578444444, 0.656111111, 0.587777778, 0.637777778, 0.627333333, 0.575555556, 0.582, 0.577111111, 0.577888889, 0.547333333, 0.520333333, 0.508, 0.475222222, 0.471222222, 0.519222222, 0.418888889, 0.464222222, 0.437222222, 0.446333333, 0.436555556, 0.498, 0.468444444, 0.441333333, 0.428666667, 0.463333333, 0.466333333, 0.422777778, 0.436777778, 0.414555556, 0.369222222, 0.345888889, 0.376888889, 0.393333333, 0.387444444, 0.319, 0.376666667, 0.370888889, 0.379666667, 0.443444444, 0.490666667, 0.533222222, 0.562111111, 0.541222222, 0.597555556, 0.554555556, 0.584666667, 0.600777778, 0.514777778, 0.553333333, 0.501666667, 0.432777778, 0.487111111, 0.449333333, 0.448333333, 0.364222222, 0.391444444, 0.467555556, 0.475444444, 0.494, 0.471666667, 0.498888889, 0.482777778, 0.513444444, 0.604111111, 0.601777778, 0.531777778, 0.496, 0.522555556, 0.551555556, 0.555777778, 0.641888889, 0.656, 0.582333333, 0.549, 0.546888889, 0.507888889, 0.517666667, 0.510666667, 0.420222222, 0.379666667, 0.307333333, 0.312222222, 0.262444444, 0.361777778, 0.445222222, 0.375, 0.405777778, 0.441111111, 0.453444444, 0.447444444, 0.498333333, 0.532666667, 0.480333333, 0.481666667, 0.472111111, 0.515, 0.490444444, 0.440111111, 0.542333333, 0.523222222, 0.541333333, 0.490777778, 0.444333333, 0.502, 0.479777778, 0.523555556, 0.582888889, 0.580777778, 0.593222222, 0.579111111, 0.615555556, 0.641222222, 0.595444444, 0.546555556, 0.550111111, 0.491666667, 0.437444444, 0.444888889, 0.488555556, 0.514888889, 0.500111111, 0.591555556, 0.656333333, 0.633666667, 0.676888889, 0.728222222, 0.705777778, 0.658666667, 0.684333333, 0.678333333, 0.662555556, 0.569444444, 0.608333333, 0.628666667, 0.547555556, 0.568222222, 0.628, 0.608, 0.559666667, 0.484, 0.55, 0.482222222, 0.418555556, 0.475777778, 0.488444444, 0.479777778, 0.493666667, 0.578, 0.619555556, 0.562666667, 0.620222222, 0.643, 0.601777778, 0.605888889, 0.572666667, 0.535333333, 0.517333333, 0.487444444, 0.580111111, 0.558111111, 0.6, 0.585111111, 0.552222222, 0.592888889, 0.583333333, 0.547444444, 0.547666667, 0.506888889, 0.534777778, 0.522555556, 0.594666667, 0.594444444, 0.540222222, 0.603555556, 0.654222222, 0.677222222, 0.712, 0.668333333, 0.658222222, 0.570555556, 0.559, 0.512888889, 0.522777778, 0.455333333, 0.476666667, 0.406666667, 0.466, 0.462333333, 0.505222222, 0.527444444, 0.610666667, 0.589666667, 0.656111111, 0.595222222, 0.651111111, 0.566555556, 0.598888889, 0.574111111, 0.604444444, 0.620666667, 0.547666667, 0.533111111, 0.546111111, 0.459222222, 0.481777778, 0.493, 0.486111111, 0.474, 0.438777778, 0.481111111, 0.408222222, 0.409111111, 0.407444444, 0.465888889, 0.458666667, 0.525111111, 0.483444444, 0.459333333, 0.461555556, 0.464444444, 0.493666667, 0.518555556, 0.459888889, 0.429666667, 0.371, 0.332777778, 0.341333333, 0.339777778, 0.408444444, 0.360666667, 0.341222222, 0.330444444, 0.310555556, 0.366111111, 0.377111111, 0.330444444, 0.283666667, 0.257, 0.287444444, 0.359333333, 0.345333333, 0.379444444, 0.384444444, 0.362222222, 0.364, 0.419666667, 0.459777778, 0.477777778, 0.488555556, 0.565222222, 0.495888889, 0.419777778, 0.47, 0.507222222, 0.500333333, 0.412555556, 0.395333333, 0.356111111, 0.269555556, 0.366333333, 0.386666667, 0.390444444, 0.422222222, 0.384777778, 0.439555556, 0.458888889, 0.503777778, 0.522, 0.478444444, 0.515777778, 0.476444444, 0.501555556, 0.566777778, 0.553888889, 0.583666667, 0.543, 0.627555556, 0.669222222, 0.645666667, 0.707444444, 0.623888889, 0.579888889, 0.585, 0.560888889, 0.588222222, 0.496111111, 0.466666667, 0.445111111, 0.399555556, 0.461666667, 0.433333333, 0.416, 0.462444444, 0.467555556, 0.517777778, 0.488444444, 0.548888889, 0.570222222, 0.539333333, 0.623, 0.655222222, 0.623222222, 0.566666667, 0.55, 0.526, 0.490555556, 0.448222222, 0.495111111, 0.504333333, 0.538777778, 0.571555556, 0.616888889, 0.636222222, 0.726333333, 0.768555556, 0.76, 0.745888889, 0.681222222, 0.604444444, 0.547111111, 0.561111111, 0.577777778, 0.524666667, 0.510111111, 0.580777778, 0.526111111, 0.582222222, 0.565111111, 0.548111111, 0.513555556, 0.516777778, 0.561333333, 0.532555556, 0.560777778, 0.563, 0.542444444, 0.44, 0.942, 0.243, 0.722 };
            var spectrumMA_11 = new double[] { 0.635, 0.19, 0.036, 0.69, 0.454111111, 0.529545455, 0.517181818, 0.566454545, 0.585363636, 0.565909091, 0.602090909, 0.572727273, 0.599818182, 0.586909091, 0.528454545, 0.460090909, 0.427454545, 0.403727273, 0.385090909, 0.441727273, 0.479727273, 0.520090909, 0.558090909, 0.534636364, 0.537545455, 0.561727273, 0.607, 0.630454545, 0.697454545, 0.722181818, 0.666181818, 0.597181818, 0.553818182, 0.492727273, 0.560818182, 0.548272727, 0.569, 0.587090909, 0.579181818, 0.526, 0.520636364, 0.502909091, 0.577454545, 0.576636364, 0.592090909, 0.589454545, 0.603363636, 0.573727273, 0.542272727, 0.499545455, 0.469454545, 0.484545455, 0.488727273, 0.476818182, 0.453545455, 0.462090909, 0.395909091, 0.398454545, 0.380909091, 0.370545455, 0.416181818, 0.465, 0.467, 0.521181818, 0.523545455, 0.567454545, 0.602636364, 0.661363636, 0.654272727, 0.696545455, 0.681, 0.694818182, 0.652363636, 0.579454545, 0.570363636, 0.538636364, 0.539545455, 0.485909091, 0.486545455, 0.47, 0.423272727, 0.406909091, 0.408, 0.473909091, 0.514090909, 0.525363636, 0.520272727, 0.511727273, 0.487636364, 0.482090909, 0.480454545, 0.567454545, 0.622636364, 0.559181818, 0.496090909, 0.515909091, 0.518363636, 0.506545455, 0.516272727, 0.596727273, 0.563363636, 0.534636364, 0.473272727, 0.423818182, 0.437636364, 0.440909091, 0.382545455, 0.400909091, 0.431909091, 0.458272727, 0.422909091, 0.447090909, 0.511363636, 0.568727273, 0.634272727, 0.648454545, 0.645454545, 0.659454545, 0.576909091, 0.604636364, 0.586818182, 0.568727273, 0.567909091, 0.513272727, 0.453818182, 0.443818182, 0.429181818, 0.444818182, 0.499272727, 0.564363636, 0.554, 0.517181818, 0.493909091, 0.504909091, 0.547909091, 0.582090909, 0.532909091, 0.570818182, 0.551181818, 0.491181818, 0.422363636, 0.405272727, 0.379272727, 0.431454545, 0.408272727, 0.416363636, 0.428, 0.492272727, 0.513636364, 0.568090909, 0.625818182, 0.707818182, 0.666454545, 0.735454545, 0.701090909, 0.691727273, 0.685818182, 0.698090909, 0.642909091, 0.635818182, 0.634727273, 0.637545455, 0.571181818, 0.623909091, 0.583909091, 0.571090909, 0.621090909, 0.581090909, 0.576090909, 0.591363636, 0.572, 0.513545455, 0.475909091, 0.488545455, 0.474090909, 0.450545455, 0.49, 0.457636364, 0.484363636, 0.456363636, 0.473181818, 0.433454545, 0.434, 0.436, 0.444090909, 0.446727273, 0.460818182, 0.461909091, 0.437818182, 0.410090909, 0.359272727, 0.334909091, 0.374545455, 0.4, 0.357, 0.389909091, 0.383818182, 0.402545455, 0.415545455, 0.421545455, 0.469090909, 0.551454545, 0.534454545, 0.524090909, 0.526636364, 0.601181818, 0.585909091, 0.533272727, 0.563636364, 0.516727273, 0.504090909, 0.496727273, 0.431818182, 0.450636364, 0.410272727, 0.452454545, 0.437454545, 0.461090909, 0.499727273, 0.437272727, 0.494454545, 0.472727273, 0.472181818, 0.536909091, 0.578, 0.574545455, 0.546636364, 0.544727273, 0.499545455, 0.545, 0.612, 0.600727273, 0.618363636, 0.607090909, 0.527727273, 0.469818182, 0.533181818, 0.511545455, 0.461272727, 0.471363636, 0.397454545, 0.348636364, 0.285090909, 0.347272727, 0.384909091, 0.392545455, 0.428, 0.398636364, 0.424545455, 0.419727273, 0.445727273, 0.469454545, 0.484818182, 0.564272727, 0.482818182, 0.485090909, 0.493090909, 0.452636364, 0.502545455, 0.502818182, 0.546272727, 0.478636364, 0.492, 0.500545455, 0.483545455, 0.535181818, 0.508181818, 0.576454545, 0.628090909, 0.576363636, 0.554181818, 0.573727273, 0.586181818, 0.567181818, 0.574545455, 0.517909091, 0.506, 0.515181818, 0.500909091, 0.490090909, 0.509090909, 0.566545455, 0.579545455, 0.605818182, 0.624545455, 0.651727273, 0.690363636, 0.681909091, 0.686, 0.664363636, 0.687363636, 0.636272727, 0.619545455, 0.601909091, 0.581272727, 0.601454545, 0.599909091, 0.606, 0.583363636, 0.523454545, 0.531272727, 0.472, 0.478454545, 0.472818182, 0.486727273, 0.544454545, 0.545, 0.542454545, 0.532909091, 0.533727273, 0.583454545, 0.554545455, 0.570636364, 0.64, 0.623727273, 0.583363636, 0.573181818, 0.527818182, 0.535454545, 0.533181818, 0.585090909, 0.541909091, 0.565727273, 0.616454545, 0.564909091, 0.552545455, 0.537909091, 0.526909091, 0.571909091, 0.538, 0.571818182, 0.561181818, 0.579727273, 0.606909091, 0.602727273, 0.614727273, 0.661545455, 0.670636364, 0.661818182, 0.601090909, 0.591, 0.512818182, 0.548272727, 0.533272727, 0.510909091, 0.459, 0.497818182, 0.457545455, 0.467636364, 0.484, 0.545636364, 0.573363636, 0.650454545, 0.570181818, 0.619181818, 0.571363636, 0.614818182, 0.556090909, 0.600272727, 0.640090909, 0.589909091, 0.587, 0.534545455, 0.458090909, 0.478545455, 0.485454545, 0.490272727, 0.498090909, 0.529363636, 0.489, 0.413181818, 0.421181818, 0.355272727, 0.412909091, 0.485, 0.525727273, 0.490272727, 0.507454545, 0.478818182, 0.434181818, 0.431454545, 0.445545455, 0.454454545, 0.503181818, 0.448090909, 0.387272727, 0.357090909, 0.361272727, 0.392545455, 0.348909091, 0.344727273, 0.320909091, 0.333, 0.371363636, 0.344272727, 0.323909091, 0.321090909, 0.323545455, 0.306090909, 0.304545455, 0.308363636, 0.364272727, 0.415545455, 0.386545455, 0.322181818, 0.355909091, 0.429363636, 0.464909091, 0.494, 0.535636364, 0.476, 0.476454545, 0.460636364, 0.422636364, 0.468909091, 0.469090909, 0.445, 0.409181818, 0.365272727, 0.376, 0.330363636, 0.374363636, 0.424636364, 0.399181818, 0.413727273, 0.411090909, 0.483818182, 0.468909091, 0.476090909, 0.531818182, 0.464454545, 0.518636364, 0.543454545, 0.521454545, 0.573818182, 0.568454545, 0.606909091, 0.611454545, 0.633, 0.651818182, 0.607090909, 0.628090909, 0.589727273, 0.569, 0.596545455, 0.535272727, 0.549, 0.483727273, 0.431181818, 0.456545455, 0.403818182, 0.419636364, 0.472909091, 0.500454545, 0.5, 0.467363636, 0.526909091, 0.515909091, 0.533636364, 0.586636364, 0.578, 0.628272727, 0.623727273, 0.571636364, 0.515181818, 0.504636364, 0.483, 0.489636364, 0.532727273, 0.577545455, 0.586181818, 0.592363636, 0.582272727, 0.645818182, 0.683454545, 0.674454545, 0.698545455, 0.723363636, 0.667, 0.621181818, 0.610636364, 0.587363636, 0.570363636, 0.580272727, 0.555363636, 0.500181818, 0.577909091, 0.519090909, 0.512272727, 0.536272727, 0.562545455, 0.570545455, 0.543272727, 0.584909091, 0.543454545, 0.546545455, 0.885, 0.44, 0.942, 0.243, 0.722 };

            double[] smoothoutput = new double[500];
            for (int i = 0; i < 500; i++)
            {
                smoothoutput[i] = 0.0;
            }
            //Data for testing spectrumToXYZ function
            var wavelengthData = new int[] { 360, 365, 370, 375, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500, 505, 510, 515, 520, 525, 530, 535, 540, 545, 550, 555, 560, 565, 570, 575, 580, 585, 590, 595, 600, 605, 610, 615, 620, 625, 630, 635, 640, 645, 650, 655, 660, 665, 670, 675, 680, 685, 690, 695, 700, 705, 710, 715, 720, 725, 730, 735, 740 };
            var spectrum1Data = new double[] { 6.996666667, 7.635, 8.273333333, 8.938333333, 9.603333333, 10.305, 11.00666667, 11.77166667, 12.53666667, 13.20666667, 13.87666667, 14.34333333, 14.81, 15.055, 15.3, 15.26166667, 15.22333333, 14.955, 14.68666667, 14.22, 13.75333333, 13.145, 12.53666667, 11.785, 11.03333333, 10.33833333, 9.643333333, 8.945, 8.246666667, 7.681666667, 7.116666667, 6.741666667, 6.366666667, 6.106666667, 5.846666667, 5.631666667, 5.416666667, 5.186666667, 4.956666667, 4.761666667, 4.566666667, 4.488333333, 4.41, 4.563333333, 4.716666667, 5.186666667, 5.656666667, 6.495, 7.333333333, 8.668333333, 10.00333333, 11.92666667, 13.85, 16.24666667, 18.64333333, 21.55833333, 24.47333333, 27.55, 30.62666667, 33.55833333, 36.49, 39.02, 41.55, 43.43, 45.31, 46.71333333, 48.11666667, 49.11333333, 50.11, 50.72166667, 51.33333333, 51.73833333, 52.14333333, 52.41333333, 52.68333333, 52.905, 53.12666667 };
            var spectrum2Data = new double[] { 7.34, 8.09, 8.84, 9.601666667, 10.36333333, 11.135, 11.90666667, 12.70333333, 13.5, 14.13666667, 14.77333333, 15.15666667, 15.54, 15.735, 15.93, 15.90333333, 15.87666667, 15.72833333, 15.58, 15.34333333, 15.10666667, 14.795, 14.48333333, 14.01666667, 13.55, 13.04666667, 12.54333333, 11.96166667, 11.38, 10.875, 10.37, 9.978333333, 9.586666667, 9.258333333, 8.93, 8.596666667, 8.263333333, 7.895, 7.526666667, 7.208333333, 6.89, 6.758333333, 6.626666667, 6.765, 6.903333333, 7.315, 7.726666667, 8.436666667, 9.146666667, 10.255, 11.36333333, 12.94333333, 14.52333333, 16.51166667, 18.5, 20.98833333, 23.47666667, 26.18, 28.88333333, 31.59333333, 34.30333333, 36.80333333, 39.30333333, 41.29333333, 43.28333333, 44.83, 46.37666667, 47.55166667, 48.72666667, 49.49333333, 50.26, 50.77833333, 51.29666667, 51.65333333, 52.01, 52.29, 52.57 };
            //Data for testing XYXtoLAB and DeltaE
            var XYZ1 = new double[] { 10.5289, 7.4916, 14.6256 };
            var XYZ2 = new double[] { 11.8389, 9.75376, 16.1323 };
            var LAB1 = new double[] { 32.9008, 29.3597, -18.1155 };
            var LAB2 = new double[] { 37.3968, 19.5531, -13.7668 };
            double DE76 = 11.6312;
            double DE94_T = 4.723976;
            double DE94_GA = 6.2232;
            double DE00 = 6.09095;

            bool success = true;

                {
                    Console.WriteLine("10. SmoothSpectrum with points = 1");
                    try
                    {
                        smoothoutput = Functions.SmoothSpectrum(spectrumMA_1, 1, 1);
                    if (spectrumMA_1.Length != smoothoutput.Length)
                    {
                        success = false;
                    }
                        for (int i = 0; i < spectrumMA_1.Length; ++i)
                        {
                        if (Math.Abs(spectrumMA_1[i] - smoothoutput[i]) > 0.00001)
                        {
                            success = false;
                        }
                        }
                    }
                    catch
                    {
                        success = false;
                    
                    }
                    Console.WriteLine(success ? "Success" : "False");
            }
            {
                success = true;
                for (int i = 0; i < smoothoutput.Length; i++)
                {
                    smoothoutput[i] = 0.0;
                }
                Console.WriteLine("20. SmoothSpectrum with points = 2");
                try
                {
                    smoothoutput = Functions.SmoothSpectrum(spectrumMA_1, 2, 1);
                    if (spectrumMA_1.Length != smoothoutput.Length)
                        success = false;
                    for (int i = 0; i < spectrumMA_1.Length; ++i)
                    {
                        if (Math.Abs(spectrumMA_3[i] - smoothoutput[i]) > 0.00001)
                            success = false;
                    }
                }
                catch
                {
                    success = false;
                }
                Console.WriteLine(success ? "Success" : "False");   }
            {
                success = true;
                for (int i = 0; i < smoothoutput.Length; i++)
                {
                    smoothoutput[i] = 0.0;
                }
                Console.WriteLine("30. SmoothSpectrum with points = 3");
                try
                {
                    smoothoutput = Functions.SmoothSpectrum(spectrumMA_1, 3, 1);
                    if (spectrumMA_1.Length != smoothoutput.Length)
                        success = false;
                    for (int i = 0; i < spectrumMA_1.Length; ++i)
                    {
                        if (Math.Abs(spectrumMA_3[i] - smoothoutput[i]) > 0.00001)
                        {
                            success = false;
                        }
                    }
                    

        }
                catch
                {
                    success = false;
                }
                Console.WriteLine(success ? "Success" : "False");
            }
            {
                success = true;
                for (int i = 0; i < smoothoutput.Length; i++)
                {
                    smoothoutput[i] = 0.0;
                }
                Console.WriteLine("40. SmoothSpectrum with points = 5");
                try
                {
                    smoothoutput = Functions.SmoothSpectrum(spectrumMA_1, 5, 1);
                    if (spectrumMA_1.Length != smoothoutput.Length)
                        success = false;
                    for (int i = 0; i < spectrumMA_1.Length; ++i)
                    {
                        if (Math.Abs(spectrumMA_5[i] - smoothoutput[i]) > 0.00001)
                            success = false;
                    }
                }
                catch
                {
                    success = false;
                }
                Console.WriteLine(success ? "Success" : "False");
            }

            success = false;
            Console.WriteLine("50. spectrum 1 to XYZ");
            var XYZtest = new double[] { 0, 0, 0 };
            XYZtest = Functions.SpectrumToXYZ(spectrum1Data, wavelengthData);
            if (Math.Abs(XYZ1[0] - XYZtest[0]) < 0.5 && Math.Abs(XYZ1[1] - XYZtest[1]) < 0.5 && Math.Abs(XYZ1[2] - XYZtest[2]) < 0.5)
            {
                success = true;
            }

            Console.WriteLine(success ? "Success" : "False");
            
            success = false;
            Console.WriteLine("60. XYZ to LAB");
            var LABtest = new double[] { 0, 0, 0 };
            LABtest = Functions.XYZtoLAB(XYZ1);
            if (Math.Abs(LAB1[0] - LABtest[0]) < 1 && Math.Abs(LAB1[1] - LABtest[1]) < 1 && Math.Abs(LAB1[2] - LABtest[2]) < 1)
            {
                success = true;
            }
            Console.WriteLine(success ? "Success" : "False");

            success = false;
            Console.WriteLine("70. DE76");
            double DE76test = Functions.DE76(LAB1, LAB2);
            if (Math.Abs(DE76 - DE76test) < 0.01 )
            {
                success = true;
            }
            Console.WriteLine(success ? "Success" : "False");

            success = false;
            Console.WriteLine("80. DE94 (textiles)");
            double DE94_Ttest = Functions.DE94_T(LAB1, LAB2);
            if (Math.Abs(DE94_T - DE94_Ttest) < 0.01)
            {
                success = true;
            }
            Console.WriteLine(success ? "Success" : "False");

            success = false;
            Console.WriteLine("90. DE94 (textiles)");
            double DE94_GAtest = Functions.DE94_GA(LAB1, LAB2);
            if (Math.Abs(DE94_GA - DE94_GAtest) < 0.01)
            {
                success = true;
            }

            Console.WriteLine(success ? "Success" : "False");

            success = false;
            Console.WriteLine("100. DE00");
            double DE00test = Functions.DE00(LAB1, LAB2);
            if (Math.Abs(DE00 - DE00test) < 0.01)
            {
                success = true;
            }
            Console.WriteLine(success ? "Success" : "False");

        } //end main
    }
}
